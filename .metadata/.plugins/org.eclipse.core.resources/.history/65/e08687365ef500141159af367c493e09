package hr.fer.zemris.java.fractals.complex;

import java.util.Arrays;
import java.util.Collections;


public final class ComplexPolynomial {

	private Complex[] factors;
	
	// ...
	// constructor
	//TODO ako su krajni faktori 0
	public ComplexPolynomial(Complex... factors) {
		Collections.reverse(Arrays.asList(factors));
		factors = normalizeFactors(factors);
		if (factors.length == 0) {
			throw new IllegalArgumentException();
		}
		this.factors = factors;
		for (Complex complex : factors) {
			System.out.println(complex);
		}
	}

	// returns order of this polynom; eg. For (7+2i)z^3+2z^2+5z+1 returns 3
	public short order() {
		return (short)(factors.length - 1);
	}

	// computes a new polynomial this*p
	public ComplexPolynomial multiply(ComplexPolynomial p) {
		Complex[] factors = new Complex[this.order() + p.order()];
		factors[0] = roots[0].negate();
		factors[1] = new Complex(1, 0);
		
		for (int i = 1; i < roots.length; i++) {
			Complex[] factorsMul = new Complex[factors.length + 1];
			System.arraycopy(factors, 0, factorsMul, 1, factors.length);
			factorsMul[0] = Complex.ZERO;
			
			for (int j = 0; j < factors.length; j++) {
				factorsMul[j] = factorsMul[j].add(factors[j].multiply(roots[i].negate()));
			}
			factors = factorsMul;
		}
		Collections.reverse(Arrays.asList(factors));
		System.out.println("toPolynom	");
		for (Complex complex : factors) {
			System.out.print(complex + " ");
		}
	}

	// computes first derivative of this polynomial; for example, for
	// (7+2i)z^3+2z^2+5z+1 returns (21+6i)z^2+4z+5
	public ComplexPolynomial derive() {
		Complex[] derivedFactors = new Complex[factors.length - 1];
		for (int i = 1; i < factors.length; i++) {
			derivedFactors[i - 1] = factors[i].multiply(new Complex(i, 0));
		}
		//factors = Arrays.copyOfRange(factors, 1, factors.length);
		
		return new ComplexPolynomial(derivedFactors);
	}

	// computes polynomial value at given point z
	public Complex apply(Complex z) {
		Complex result = new Complex(0, 0);
		for (int i = 0; i < factors.length; i++) {
			
			Complex powedFactor = new Complex(1, 0);
			for (int j = 0; j < i; j++) {
				powedFactor = powedFactor.multiply(z);
			}
			result = result.add(factors[i].multiply(powedFactor));
		}
		return result;
	}

	@Override
	public String toString() {
		StringBuilder stringBuilder = new StringBuilder();
		for (int i = factors.length - 1; i >= 0; i--) {
			if (factors[i].equals(Complex.ZERO)) {
				continue;
			}
			String rootString = factors[i].toString();
			if (stringBuilder.length() != 0 && !rootString.trim().startsWith("-")) {
				stringBuilder.append(" + ");
			}
			if (rootString.split("[\\+\\-]").length > 2) {
				rootString = "+(" + rootString + ")"; 
			}
			stringBuilder.append(rootString);
			if (i != 0) {
				stringBuilder.append("*z^").append(i);
			}
		}
		return stringBuilder.toString();
	}
	
	private static Complex[] normalizeFactors(Complex[] factors) {
		int order = factors.length;
		for (int i = factors.length - 1; i >= 0; i--) {
			if (!factors[i].equals(Complex.ZERO)) {
				break;
			}
			order--;
		}
		
		return Arrays.copyOf(factors, order);
	}
}
