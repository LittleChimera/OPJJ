package hr.fer.zemris.linearna;

import java.util.Arrays;
import java.util.stream.Stream;

public class MatrixSubMatrixView extends AbstractMatrix {

	private IMatrix original;
	private int[] rowIndexes;
	private int[] colIndexes;

	public MatrixSubMatrixView(IMatrix original, int row, int col) {
		if (row >= original.getRowsCount() || col >= original.getColsCount()) {
			throw new IllegalArgumentException(
					"Can't exclude row/column which is not within matrix dimensions.");
		}
		rowIndexes = new int[original.getRowsCount() - 1];
		colIndexes = new int[original.getColsCount() - 1];
		for (int i = 0, rowI = 0, colI = 0; i < rowIndexes.length; i++) {
			// skip excluded row/column
			if (rowI == row) {
				rowI++;
			}
			if (colI == col) {
				colI++;
			}
			rowIndexes[i] = rowI; 
		}

	}

	private MatrixSubMatrixView(IMatrix original, int[] rowIndexes,
			int[] colIndexes) {
		if (rowIndexes.length == 0 || colIndexes.length == 0) {
			throw new IllegalArgumentException("Can't create matrix having one dimension 0.");
		}
		this.original = original;
		this.rowIndexes = rowIndexes;
		this.colIndexes = colIndexes;
	}

	public IMatrix subMatrix(int row, int col, boolean liveView) {
		int[] rowIndexes = new int[]
	}

	@Override
	public int getRowsCount() {
		return rowIndexes.length;
	}

	@Override
	public int getColsCount() {
		return colIndexes.length;
	}

	@Override
	public double get(int row, int col) {
		return original.get(rowIndexes[row], colIndexes[col]);
	}

	@Override
	public IMatrix set(int row, int col, double value) {
		original.set(rowIndexes[row], colIndexes[col], value);
		return this;
	}

	@Override
	public IMatrix copy() {
		return new MatrixSubMatrixView(original.copy(), rowIndexes, colIndexes);
	}

	@Override
	public IMatrix newInstance(int rows, int cols) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public double[][] toArray() {
		double[][] result = new double[getRowsCount()][getColsCount()];
		for (int i = 0; i < result.length; i++) {
			for (int j = 0; j < result[i].length; j++) {
				result[i][j] = get(i, j);
			}
		}
		return null;
	}
	
	private void validateExluded(IMatrix original, int row, int col) {
		if (row >= original.getRowsCount() || col >= original.getColsCount()) {
			throw new IllegalArgumentException(
					"Can't exclude row/column which is not within matrix dimensions.");
		}
	}
}
