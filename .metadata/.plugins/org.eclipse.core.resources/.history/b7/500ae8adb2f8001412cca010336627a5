package hr.fer.zemris.java.gui.layouts;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.LayoutManager2;
import java.util.HashMap;
import java.util.Map;

public class CalcLayout implements LayoutManager2 {
	
	private static final int ROWS = 5;
	private static final int COLUMNS = 7;
	
	private int spacing;
	private Map<RCPosition, Component> components;
	
	
	public CalcLayout() {
		this(0);
	}
	
	public CalcLayout(int spacing) {
		this.spacing = spacing;
		components = new HashMap<RCPosition, Component>();
	}

	public void removeLayoutComponent(Component comp) {
		components.values().remove(comp);
	}

	public Dimension preferredLayoutSize(Container parent) {
		int maxPreferredWidth = 0, maxPreferredHeight = 0;
		for (Component c : components.values()) {
			
		}
	}

	public Dimension minimumLayoutSize(Container parent) {
		// TODO Auto-generated method stub
		return null;
	}

	public Dimension maximumLayoutSize(Container target) {
		// TODO Auto-generated method stub
		return null;
	}

	public void layoutContainer(Container parent) {
		// TODO Auto-generated method stub
		
	}
	
	public void addLayoutComponent(String name, Component comp) {
		addLayoutComponent(comp, name);
	}
	
	//TODO constraints je RCPosition, a moze se i dati kao "1,2", "2,4" etc.
	//TODO ne smiju biti 2 komponente s istim ogranicenjem
	public void addLayoutComponent(Component comp, Object constraints) {
		RCPosition rcConstraints = processConstraints(constraints);
		
		
	}
	
	private RCPosition processConstraints(Object constraints) {
		RCPosition rcConstraints = null;

		if (constraints instanceof String) {
			rcConstraints = parseStringConstraints((String) constraints);
		} else {
			rcConstraints = (RCPosition) constraints;
		}
		int row = rcConstraints.getRow();
		int column = rcConstraints.getColumn();
		
		// checks if constraints are within matrix 5x7
		if ((row < 1 || row > ROWS) || (column < 1 && column > COLUMNS)) {
			throw new IllegalArgumentException();
		}
		
		//checks if any of non-existing elements of matrix are accessed
		if (row == 1 && (column >= 2 && column <= 5)) {
			throw new IllegalArgumentException();
		}
		
		return rcConstraints;
	}
	
	private RCPosition parseStringConstraints(String s) {
		String[] rowAndCol = ((String) s).split(",");
		if (rowAndCol.length > 2) {
			throw new IllegalArgumentException();
		}
		
		int row, column;
		try {
			row = Integer.parseInt(rowAndCol[0]);
			column = Integer.parseInt(rowAndCol[1]);
		} catch (Exception e) {
			throw new IllegalArgumentException();
		}
		return new RCPosition(row, column);
	}


	public float getLayoutAlignmentX(Container target) {
		// TODO Auto-generated method stub
		return 0;
	}

	public float getLayoutAlignmentY(Container target) {
		// TODO Auto-generated method stub
		return 0;
	}

	public void invalidateLayout(Container target) {
		// TODO Auto-generated method stub
		
	}

}
